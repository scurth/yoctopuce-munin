#!/usr/bin/python
#
# Author: Sascha Curth
#
# sample config
# [PT100MK1_*]
#   env.temperature_warning 13
#   env.temperature_critical 30


import urllib
import json
import sys
import os

measurementtype="temperature"
apiuri='http://127.0.0.1:4444'
scriptname=os.path.basename(__file__)
modulename=scriptname.partition('_')[0]

def initDeviceinfo():
    serial=scriptname.partition('_')[2].partition('.')[0]
    deviceurl = '%s/bySerial/%s-%s/api.json' % (apiuri,modulename,serial)
    deviceresponse = urllib.urlopen(deviceurl)
    devicedata = json.loads(deviceresponse.read())
    return devicedata

if len(sys.argv) == 2 and sys.argv[1] == "autoconf":
    #Magic markers for munin autoconf
    #%# family=auto
    #%# capabilities=autoconf suggest
    print "yes"

elif len(sys.argv) == 2 and sys.argv[1] == "suggest":
    huburl = '%s/api.json' % apiuri
    hubresponse = urllib.urlopen(huburl);
    hubdata = json.loads(hubresponse.read())
    for key in hubdata["services"]["yellowPages"][''.join(measurementtype[0].upper() + measurementtype[1:])]:
        if modulename in key["hardwareId"]:
            serial=key["hardwareId"].partition('-')[2].partition('.')[0]
            print "%s" % serial

elif len(sys.argv) == 2 and sys.argv[1] == "config":
    devicedata=initDeviceinfo()
    logicalname=devicedata["module"]["logicalName"]
    print 'graph_title %s %s' % (scriptname,logicalname)
    print 'graph_vlabel %s in %s' % (''.join(measurementtype[0].upper() + measurementtype[1:]),devicedata[measurementtype]["unit"])
    print 'graph_category yoctopuce'

    print '%s.label Current value in %s' % (measurementtype,devicedata[measurementtype]["unit"])
    print '%s.draw AREA' % measurementtype
    print '%s.type GAUGE' % measurementtype
    varname="%s_warning" % measurementtype
    print '%s.warning %s' % (measurementtype,os.environ.get(varname))
    varname="%s_critical" % measurementtype
    print '%s.critical %s' % (measurementtype,os.environ.get(varname))

else:
    devicedata=initDeviceinfo()
    print '%s.value %s' % (measurementtype,devicedata[measurementtype]["advertisedValue"])
